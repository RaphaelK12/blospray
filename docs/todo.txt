OSPRAY updates in 2.0.x branch

OSPRAY issues
- Volume rendering currently is buggy work when applying a transform
  to the volume model with the scivis renderer (path tracer works ok)
- The background alpha with `bgColor` seems to be ignored (or always 0) when using the path
  tracer renderer. See https://github.com/ospray/ospray/issues/347.
  For now use backplate work around.
  XXX was fixed in a recent 2.0.x commit
- Camera clipping start doesn't match cycles render, nor OpenGL scene view.
  OSPRay also only supports setting the clipping start, not a far clip value.

Blender issues
- https://developer.blender.org/T59089 (get eevee render instead of custom one)
- https://developer.blender.org/T64295 (custom props not updating in UI)
- No depsgraph updates are sent when merely changing connections between 
  custom shader nodes?
- The depsgraph updates sent to view_update() are not always fine-grained
  enough and/or are missing specific updates. Examples: custom prop update
  cannot be detected as such, the whole object/datablock is flagged

Fix/improve/optimize
- Correctly release the scene after rendering
- If possible, get rid of OpenEXR as intermediate framebuffer file
  (depends on possibilities of blender API)
- Move background color settings from World panel to Render panel?
  With cycles it's a World setting, but with ospray it's a parameter
  of the scivis renderer
- Point and spot lights need a very high intensity value to contribute
  substantial light to the scene, while the sun light at 1 is already enough.
  For area lights the intensity value in ospray is per unit area, so scaling the
  light larger leads to more light in the scene. This is different from cycles,
  where changing the size keeps the scene lighting the same.
- Improve the caching of scene elements, e.g. by having the the client get
  a list of elements from the server including hashes to figure out what
  data to send/update. Also check use of exported_meshes in connection.py
- Add checkbox for adaptive volume sampling, as it is enabled by default
  XXX is this still relevant for 2.0?
- Return export report/errors as text and store them in text area on Blender side
- For batch renders there's no need to send the framebuffer for each
  sample, only need the final buffer, but not sure we can detect that 
  specific situation. Should look into how cycles handles this case.
  Btw, an OSPRenderer has an 'spp' parameter, meaning we could probably
  render all samples in one go and with less overhead due to not having
  to send each sample framebuffer from server to blender
- A blender object by default associates the material to the object data
  and not the object itself. This actually matches the GeometricModel in
  OSPRay, which is a combination of geometry and material(s). We currently
  link the material to a scene object during export and not to scene data.
  For instacing large numbers of objects (e.g. particle system) this introduces
  quite a bit of overhead, as we don't reuse the gmodel for instancing but 
  create a new one for each object. Volumes would need to be treated separately,
  as there the material needs to be attached to the object in Blender, as
  the mesh data only controls the underlying volumetric data to use and
  not the iso/slices/volume representation (which is set by the object)

Tests/examples:
- Check "volume" prop in some of the tests, isn't needed anymore is it?
- Isovalues2 test uses transform on structured volume
- xmas missing data in repo?

Must haves
- Make materials work on slices and isosurfaces, plus geometry plugins
- Light UI panel
- Volume UI panel
- Camera UI panel
- Better error handling and recovery
- Cancel render during export of large scenes (if this is even possible)
- Reload plugin when shared lib changes
- Handle text objects

Very nice to haves ;-)
- UI buttons to preload/clear the scene on the server, including
  setting object bboxes of volumes to correct sizes (see also next point)
- Detect that a new blender file was loaded and clear the server scene
  automatically

Nice to haves
- Start/stop server during rendering automatically
- Reduce overhead in server -> client communication. E.g. render
  of angel.blend in 3840x2160 @ 4 spp takes 40.972s on the server,
  but 46.90s on the blender side (i.e. +14.5% longer)
- Textured geometry
- Provide a list of render presets
- Allow plugin parameters to use environment variables, so blend files
  can use non-hardcoded values for things like file paths
- Allow depth buffer to be returned to blender
- Log file for the server
- OSPRAY camera generated by plugin on Blender camera (XXX huh?)
- Preview rendering of materials
- Option to NOT send every sample image when doing final render 
  (saves overhead of transfering images)
- Option to control caching level: nothing, plugin instances, ..., all
  Or similar controls, e.g. cache plugin instances, cache blender meshes
- Check use of depsgraph_update_post_handler()
  https://wiki.blender.org/wiki/Reference/Release_Notes/2.81/Python_API
  for automatically updating extent mesh during render

Obscure to haves
- Handle multiple concurrent renders in Blender
- Optimize scene when Blender instances are used

Decide
- Protobuf is very nice for the combo data layout description, 
  serialization, application API it provides. But it is an extra dependency
  that users would need to install. Can we locally include protobuf
  in the sources and build process? Or should we get rid of it
  altogether?
  https://capnproto.org/
  https://google.github.io/flatbuffers/
  https://github.com/eigenein/protobuf
  
  
Test
...


Look into
- OSPRay's extension modules and scenegraph, mostly w.r.t. model loading.
  Plus look at overlap in functionality with our own plugins. It seems
  ospray plugins need an ispc component, which makes them less attractive
  to use for end users (yet another tool/syntax to learn).
- ospray 2.0 model clipping (if it arrives)
- ospray_sg
