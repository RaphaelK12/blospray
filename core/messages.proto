// VERSION: 2
// ======================================================================== //
// BLOSPRAY - OSPRay as a Blender render engine                             //
// Paul Melis, SURFsara <paul.melis@surfsara.nl>                            //
// Protocol messages                                                        //
// ======================================================================== //
// Copyright 2018-2019 SURFsara                                             //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

syntax = "proto3";

message ClientMessage
{
    enum Type {
        HELLO = 0;                      
        BYE = 1;  
        
        CLEAR_SCENE = 11;

        UPDATE_RENDERER_TYPE = 20;
        UPDATE_WORLD_SETTINGS = 21;
        UPDATE_RENDER_SETTINGS = 22;         
        UPDATE_FRAMEBUFFER_SETTINGS = 23;        
        UPDATE_BLENDER_MESH = 24;
        UPDATE_PLUGIN_INSTANCE = 25;
        UPDATE_CAMERA = 26;
        UPDATE_MATERIAL = 27;
        UPDATE_OBJECT = 28;

        DELETE_OBJECT = 30;
        DELETE_BLENDER_MESH = 31;
        DELETE_PLUGIN_INSTANCE = 32;
        
        START_RENDERING = 40;
        PAUSE_RENDERING = 41;           // Interactive rendering only
        CANCEL_RENDERING = 42;
        REQUEST_RENDER_OUTPUT = 49;
        
        GET_SERVER_STATE = 50;
        QUERY_BOUND = 51;
        
        QUIT = 99;                      // Make server quit
    }
    
    Type    type = 1;
        
    //bool    bool_value = 10;

    uint32  uint_value = 20;
    uint32  uint_value2 = 21;
    uint32  uint_value3 = 22;

    //float   float_value = 30;

    string  string_value = 40;

    /*
    HELLO: 
        uint_value = protocol version
    CLEAR_SCENE:
        string_value = "all" | "keep_plugin_instances"
    QUERY_BOUND: 
        string_value = object name
    START_RENDERING:
        string_value = "final" | "interactive" | "preview"      
        uint_value = number of samples        
        uint_value2 = initial resolution factor, e.g. 16 or 4 (interactive)
                    = framebuffer update rate (final)
    UPDATE_RENDERER_TYPE:
        string_value = "scivis" | "pathtracer"
    UPDATE_FRAMEBUFFER_SETTINGS:
        string_value = "final" | "interactive"
        uint_value = format (OSPFrameBufferFormat)
        uint_value2 = width
        uint_value3 = height
    */

    // XXX fold different types of submessages in here?
}

message HelloResult
{
    bool    success = 1;
    string  message = 2;    
}

message ServerStateResult
{
    string  state = 1;
}

message QueryBoundResult
{
    bool    success = 1;
    string  message = 2;
    uint32  result_size = 3;
}

message RenderResult 
{
    enum Type {
        FRAME = 0;
        CANCELED = 1;
        DONE = 2;
    }
    
    Type    type = 1;
    
    // FRAME
    uint32  sample = 2;             // 1, 2, ... number-of-samples
    uint32  reduction_factor = 3;   // 1, 2, 3, ...
    uint32  width = 4;
    uint32  height = 5;

    float   variance = 10;

    string  file_name = 20;         // Only used for server-internal purposes
    uint32  file_size = 21;

    // Server memory usage, in megabytes
    float   memory_usage = 30;
    float   peak_memory_usage = 31;
}

// Scene

// Mesh Data with a plugin attached
message UpdatePluginInstance
{   
    enum Type {                    
        GEOMETRY = 0;   // Geometry plugin
        VOLUME = 1;     // Volume plugin
        SCENE = 2;      // Scene plugin
    }
    
    Type        type = 1;
    string      name = 2;
    
    string      plugin_name = 3;
    string      plugin_parameters = 4;
    string      custom_properties = 5;

    // XXX link material(s) here
}

message UpdateObject
{
    enum Type {
        // Regular Blender mesh
        MESH = 0;
        
        // OSPRay geometry (needs to reference geometry mesh data)
        GEOMETRY = 10;

        // OSPRay volume (needs to reference volume mesh data)
        VOLUME = 20;
        
        // OSPRay isosurfaces (needs to reference volume mesh data)
        ISOSURFACES = 30;
        
        // OSPRay slices (needs to reference volume mesh data)
        SLICES = 40;        
        
        // OSPRay scene (list of transformed Groups on the server)
        SCENE = 50;
        
        // A single light
        LIGHT = 60;
    }
    
    Type            type = 1;
    string          name = 2;
    string          custom_properties = 3;
    
    repeated float  object2world = 10;
    string          data_link = 11;
    string          material_link = 12;     // XXX use a list of strings, to get ready for slots
}

message Color
{
    float   r = 1;
    float   g = 2;
    float   b = 3;
    float   a = 4;
}

message Volume
{
    repeated float      tf_positions = 1;
    repeated Color      tf_colors = 2;
}

message Slice
{
    string          name = 1;    
    string          mesh_link = 2;

    repeated float  object2world = 3;
}

message Slices
{
    repeated Slice  slices = 1;
}

// Blender geometry (aka mesh)
message MeshData
{
    enum Flags {
        NONE = 0;
        NORMALS = 1;
        VERTEX_COLORS = 2;
        // UV = 4;
        // = 8;
    }

    uint32          flags = 1;
    uint32          num_vertices = 10;
    uint32          num_triangles = 11;

    // XXX link material(s) here
}

// Settings

message WorldSettings
{
    repeated float  ambient_color = 1;
    float           ambient_intensity = 2;

    // XXX might want to move these back to render settings at some point
    repeated float  background_color = 10;   // RGBA
}

message CameraSettings
{
    enum Type {
        PERSPECTIVE = 0;
        ORTHOGRAPHIC = 1;
        PANORAMIC = 2;
    }
    
    Type    type = 1;
    string  object_name = 2;        // Don't need this. Let's use only a single camera
    string  camera_name = 3;
    repeated float  border = 4;

    repeated float position = 10;
    repeated float view_dir = 11;
    repeated float up_dir = 12;
    
    // Perspective
    float fov_y = 20;                // Degrees
    
    // Orthographic
    float height = 30;
    
    // Perspective, orthographic
    float aspect = 40;
    
    // Common
    float clip_start = 50;
    
    float dof_focus_distance = 60;
    float dof_aperture = 61;
}

message RenderSettings
{
    string          renderer = 1;

    // All renderers
    uint32          max_depth = 4;
    float           min_contribution = 5;
    float           variance_threshold = 6;

    // Scivis renderer only
    uint32          ao_samples = 20;         
    float           ao_radius = 21;          
    float           ao_intensity = 22;    
    float           volume_sampling_rate = 23;    

    // Pathtracer renderer only
    uint32          roulette_depth = 30;
    float           max_contribution = 31;
    bool            geometry_lights = 32;    
}

message LightSettings
{
    enum Type {        
        AMBIENT = 0;
        POINT = 1;
        SUN = 2;
        SPOT = 3;
        AREA = 4;
    }
    
    Type            type = 1;
    repeated float  object2world = 2;
    string          object_name = 3;
    string          light_name = 4;
        
    // Common values
    repeated float  color = 10;
    float           intensity = 11;
    bool            visible = 12;
    
    // Per-type values
    repeated float  direction = 20;         // Directional, spot
    float           angular_diameter = 21;  // Directional
    repeated float  position = 22;          // Point/sphere, spot, quad
    float           radius = 23;            // Point/sphere, spot
    float           opening_angle = 24;     // Spot
    float           penumbra_angle = 25;    // Spot
    repeated float  edge1 = 26;             // Area/Quad
    repeated float  edge2 = 27;             // Area/Quad
}   

message MaterialUpdate
{
    enum Type
    {
        ALLOY = 0;
        CAR_PAINT = 1;
        GLASS = 2;        
        LUMINOUS = 3;
        METAL = 4;
        METALLIC_PAINT = 5;
        OBJMATERIAL = 6;
        PRINCIPLED = 7;
        THIN_GLASS = 8;
    }

    Type    type = 1;
    string  name = 2;
}

message AlloySettings
{
    repeated float  color = 1;
    repeated float  edge_color = 2;
    float           roughness = 3;
}

message CarPaintSettings
{
    repeated float  base_color = 1;
    float           roughness = 2;
    float           normal = 3;
    float           flake_density = 4;
    float           flake_scale = 5;
    float           flake_spread = 6;
    float           flake_jitter = 7;
    float           flake_roughness = 8;
    float           coat = 9;
    float           coat_ior = 10;
    repeated float  coat_color = 11;
    float           coat_thickness = 12;
    float           coat_roughness = 13;
    float           coat_normal = 14;
    repeated float  flipflop_color = 15;
    float           flipflop_falloff = 16;
}

message GlassSettings
{
    float           eta = 1;
    repeated float  attenuation_color = 2;
    float           attenuation_distance = 3;
}

message LuminousSettings
{
    repeated float  color = 1;
    float           intensity = 2;
    float           transparency = 3;
}

message MetalSettings
{
    uint32          metal = 1;
    float           roughness = 2;
}

message MetallicPaintSettings
{
    repeated float  base_color = 1;     // map_base_color
    float           flake_amount = 2;
    repeated float  flake_color = 3;
    float           flake_spread = 4;
    float           eta = 5;
}

message OBJMaterialSettings
{
    repeated float  kd = 1;
    repeated float  ks = 2;
    float           ns = 3;
    float           d = 4;
    repeated float  tf = 5;

    // XXX Pass textures, for e.g. Kd, should have 0-length Kd value in that case
    //string map_kd;
    //string map_ks;
    //string map_ns;
    //string map_d;
    //string map_bump;
}

message PrincipledSettings
{
    repeated float base_color = 1;
    repeated float edge_color = 2;
    float metallic = 3;
    float diffuse = 4;
    float specular = 5;
    float ior = 6;
    float transmission = 7;
    repeated float transmission_color = 8;
    float transmission_depth = 9;
    float roughness = 10;
    float anisotropy = 11;
    float rotation = 12;
    float normal = 13;
    float base_normal = 14;
    bool thin = 15;
    float thickness = 16;
    float backlight = 17;
    float coat = 18;
    float coat_ior = 19;
    repeated float coat_color = 20;
    float coat_thickness = 21;
    float coat_roughness = 22;
    float coat_normal = 23;
    float sheen = 24;
    repeated float sheen_color = 25;
    float sheen_tint = 26;
    float sheen_roughness = 27;
    float opacity = 28;
}

message ThinGlassSettings
{
    float           eta = 1;
    repeated float  attenuation_color = 2;
    float           attenuation_distance = 3;
    float           thickness = 4;
}

// Plugins

// Returned by generate function
message GenerateFunctionResult
{
    bool            success = 1;
    string          message = 2;        // XXX use JSON for returning multiple lines/messages?
    
    string          hash = 3;
}

